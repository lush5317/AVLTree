valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes -s ./main                                                   14:10:53
==44923== Memcheck, a memory error detector
==44923== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==44923== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==44923== Command: ./main
==44923== 
>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
1 200
------------------------------------------------------------------------------------------------------------
   200, 0

null,-1  null,-1

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
1 100
------------------------------------------------------------------------------------------------------------
             200, 1

   100, 0            null,-1

null,-1  null,-1                    

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
1 75
------------------------------------------------------------------------------------------------------------
             100, 1

    75, 0             200, 0

null,-1  null,-1  null,-1  null,-1

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
1 50
------------------------------------------------------------------------------------------------------------
                                 100, 2

              75, 1                                 200, 0

    50, 0            null,-1            null,-1            null,-1

null,-1  null,-1                                                            

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
1 1
------------------------------------------------------------------------------------------------------------
                                 100, 2

              50, 1                                 200, 0

     1, 0              75, 0            null,-1            null,-1

null,-1  null,-1  null,-1  null,-1                                        

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
2 75
------------------------------------------------------------------------------------------------------------
                                 100, 2

              50, 1                                 200, 0

     1, 0            null,-1            null,-1            null,-1

null,-1  null,-1                                                            

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
12 200
no such opertion
>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
no such opertion
>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
2 200
------------------------------------------------------------------------------------------------------------
              50, 1

     1, 0             100, 0

null,-1  null,-1  null,-1  null,-1

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
3
------------------------------------------------------------------------------------------------------------
              50, 1

     1, 0             100, 0

null,-1  null,-1  null,-1  null,-1

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
4
------------------------------------------------------------------------------------------------------------
1 50 100 

>>>>>>>>>>>>>>>>OPERATION:<<<<<<<<<<<<<<<<<<<<
insert: 1. For example, "1 44" means insert 44.
erase: 2. For example, "2 44" means erase  44.
print tree by level order: 3
print tree by inorder: 4
exit: 0
0
==44923== 
==44923== HEAP SUMMARY:
==44923==     in use at exit: 0 bytes in 0 blocks
==44923==   total heap usage: 16 allocs, 16 frees, 1,282,280 bytes allocated
==44923== 
==44923== All heap blocks were freed -- no leaks are possible
==44923== 
==44923== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)